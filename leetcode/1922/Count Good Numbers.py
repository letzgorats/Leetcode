# solution 1 - good integer, math, binary exponentiation, pow - (3ms) - (2025.04.13)
class Solution:
    def countGoodNumbers(self, n: int) -> int:
        mod = 10 ** 9 + 7

        # even 자리에는 -> 짝수 [0,2,4,6,8] : 총 5가지
        # odd 자리에는 -> 소수 [2,3,5,7] : 총 4가지
        odd = n // 2
        even = n - odd

        # 전체 경우의 수 -> 5^(n/2) * 4^(n/2)
        result = (5 ** (even % mod) * 4 ** (odd % mod)) % mod
        return result

    '''
    문자열 길이가 n 이면, 각 자리에 숫자를 하나씩 골라야 한다.

    각 자리의 선택지는 독립적이다.
    0 번 자리에 5가지 선택
    1 번 자리에 4가지 선택
    2번 자리에 5가지 선택 
    3번 자리에 4가지 선택
    4번 자리에 5가지 선택

    -> 이렇게 되면 전체 경우의 수는 : "각 자리의 경우 수를 모두 곱한 것"이 된다!

    (ex) n = 4
    0(짝수) : 짝수만, 가능한 숫자 수 -> 5가지
    1(홀수) : 소수만, 가능한 숫자 수 -> 4가지
    2(짝수) : 짝수만, 가능한 숫자 수 -> 5가지
    3(홀수) : 소수만, 가능한 숫자 수 -> 4가지
    => 5^2 * 4^2

    즉, 길이 n 일 때, 
    짝수 인덱스 자리수는 n/2 : even 
    홀수 인덱스 자리수는 n/2 : odd
    총 경우의 수는 => 5^even * 4 ^odd
    '''