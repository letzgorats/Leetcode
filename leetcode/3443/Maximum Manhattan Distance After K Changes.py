# solution 1 - (math,greedy,couting) - (1650ms) - (2025.06.20)
class Solution:
    def maxDistance(self, s: str, k: int) -> int:

        move = {"N": (-1, 0), "W": (0, -1), "S": (1, 0), "E": (0, 1)}
        north = south = east = west = 0
        ans = 0

        for idx, i in enumerate(s):

            if i == "N":
                north += 1
            elif i == "W":
                west += 1
            elif i == "E":
                east += 1
            elif i == "S":
                south += 1

            # x 좌표는 동 - 서
            # y 좌표는 북 - 남
            x = abs(east - west)
            y = abs(north - south)
            # MD 는 현재 위치까지의 맨해튼 거리
            MD = x + y


            # idx+1 : steps 수(0번째~idx 까지 -> 총 idx+1 개의 명령어) : 이동횟수 라고 보면 된다.
            # (idx+1) - MD : 움직였는데도 거리로는 반영되지 않은 부분 (ex. U턴, 왕복, 제자리 회전 같은 낭비된 step 들)
            # (ex) "NS" 같은 경우는 북->남 인데, 2번 이동했는데, 이동결과의 위치는 제자리이다. 그만큼 낭비된 움직임이 발생하는 경우가 있다.
            # (ex) "NN" 같은 경우는 북->북 인데, 2번 모두 거리 증가에 기여를 한 경우이다.


            # k 번까지 방향을 바꿀 수 있는데, 방향 하나를 바꾸면
            # 거리 변화량 최대 2까지 가능 (ex. x 방향 -1 -> 1)
            # 하지만, 변화량이 전체 step 수를 넘을 수는 없음.
            # 즉, 실제로 늘릴 수 있는 거리 변화량은 최대 min(2*k,(idx+1)-MD)를 더해주는 것
            # (idx+1)-MD 는 남은 step이라고 보면 된다. 즉, 지금까지 움직인 것 중에서 거리증가에 기여하지 못한 step의 수이다.
            # dis -> 현재까지의 맨해튼 거리(MD)에, 방향을 바꿔서 추가로 얻을 수 있는 거리를 더한다.
            dis = MD + min(2 * k, (idx + 1) - MD)

            ans = max(ans, dis)

        return ans


'''
(ex) 시뮬레이션 s= "N", "E", "W", k= 1

| Step | 문자 | 누적 위치(x, y) | MD | steps (idx+1) | 남는 step | min(2×k, 남는 step) | 증가 가능 거리      | 최댓값 갱신 |
| ---- | -- | ------------- | -- | ------------- | ---------| ------------------ | ----------------| ------ |
| 0    | N  | (0, 1)        | 1  | 1             | 0        | min(2,0)=0         | 1 + 0 = **1**   | ✔️ 1   |
| 1    | E  | (1, 1)        | 2  | 2             | 0        | min(2,0)=0         | 2 + 0 = **2**   | ✔️ 2   |
| 2    | W  | (0, 1)        | 1  | 3             | 2        | min(2,2)=2         | 1 + 2 = **3**   | ✔️ 3   |

'''